apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}
    {{- if .Chart.AppVersion }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    {{- end }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      # If serviceAccount.create is true, use the generated service account name
      serviceAccountName: {{ .Release.Name }}-sa  # Name of the service account
      {{- end }}
      containers:
        - name: {{ .Release.Name }}
          {{- if .Values.volumeMounts }}
          volumeMounts:
            - name: persistent-storage
              mountPath: {{ .Values.volumeMounts.mountPath }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ default "latest" .Values.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.application.port }}
              protocol: "{{ .Values.application.protocol }}"
          {{- if .Values.application.env }}
          env:
            {{- range .Values.application.env }}
            - name: {{ .name }}
              value: "{{ .value }}"
            {{- end }}
          {{- end }}
          {{- if .Values.application.livenessProbe }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.application.livenessProbe.path }}"
              port: {{ .Values.application.port }}
            periodSeconds: {{ .Values.application.livenessProbe.period }}
            initialDelaySeconds: {{ .Values.application.livenessProbe.delay }}
            timeoutSeconds: {{ default 10 .Values.application.livenessProbe.timeout }}
            failureThreshold: {{ default 10 .Values.application.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.application.readinessProbe }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.application.readinessProbe.path }}"
              port: {{ .Values.application.port }}
            periodSeconds: {{ .Values.application.readinessProbe.period }}
            initialDelaySeconds: {{ .Values.application.readinessProbe.delay }}
            timeoutSeconds: {{ default 10 .Values.application.readinessProbe.timeout }}
            failureThreshold: {{ default 10 .Values.application.readinessProbe.failureThreshold }}
          {{- end }}
            {{- if .Values.application.startupProbe }}
          startupProbe:
            httpGet:
              path: "{{ .Values.application.startupProbe.path }}"
              port: {{ .Values.application.port }}
            periodSeconds: {{ .Values.application.startupProbe.period }}
            initialDelaySeconds: {{ .Values.application.startupProbe.delay }}
            timeoutSeconds: {{ default 10 .Values.application.startupProbe.timeout }}
            failureThreshold: {{ default 10 .Values.application.startupProbe.failureThreshold }}
          {{- end }}
          resources:
            limits:
              cpu: {{ default "2" .Values.resources.limits.cpu }}
              memory: {{ default "2Gi" .Values.resources.limits.memory }}
            requests:
              cpu: {{ default "1" .Values.resources.requests.cpu }}
              memory: {{ default "512Mi" .Values.resources.requests.memory }}
      {{- if .Values.volumeMounts }}
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: {{ .Values.volumeMounts.volumeClaim }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
